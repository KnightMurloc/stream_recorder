/**
 *
 *  Records.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace main
{
class Users;

class Records
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _url;
        static const std::string _title;
        static const std::string _thumbnail;
        static const std::string _status;
        static const std::string _stream_url;
        static const std::string _record_file;
        static const std::string _store_server;
        static const std::string _user_id;
        static const std::string _size;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = void;
    int getPrimaryKey() const { assert(false); return 0; }

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Records(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Records(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Records(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Records() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column url  */
    ///Get the value of the column url, returns the default value if the column is null
    const std::string &getValueOfUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUrl() const noexcept;
    ///Set the value of the column url
    void setUrl(const std::string &pUrl) noexcept;
    void setUrl(std::string &&pUrl) noexcept;

    /**  For column title  */
    ///Get the value of the column title, returns the default value if the column is null
    const std::string &getValueOfTitle() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTitle() const noexcept;
    ///Set the value of the column title
    void setTitle(const std::string &pTitle) noexcept;
    void setTitle(std::string &&pTitle) noexcept;
    void setTitleToNull() noexcept;

    /**  For column thumbnail  */
    ///Get the value of the column thumbnail, returns the default value if the column is null
    const std::string &getValueOfThumbnail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getThumbnail() const noexcept;
    ///Set the value of the column thumbnail
    void setThumbnail(const std::string &pThumbnail) noexcept;
    void setThumbnail(std::string &&pThumbnail) noexcept;
    void setThumbnailToNull() noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const std::string &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const std::string &pStatus) noexcept;
    void setStatus(std::string &&pStatus) noexcept;
    void setStatusToNull() noexcept;

    /**  For column stream_url  */
    ///Get the value of the column stream_url, returns the default value if the column is null
    const std::string &getValueOfStreamUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStreamUrl() const noexcept;
    ///Set the value of the column stream_url
    void setStreamUrl(const std::string &pStreamUrl) noexcept;
    void setStreamUrl(std::string &&pStreamUrl) noexcept;
    void setStreamUrlToNull() noexcept;

    /**  For column record_file  */
    ///Get the value of the column record_file, returns the default value if the column is null
    const std::string &getValueOfRecordFile() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRecordFile() const noexcept;
    ///Set the value of the column record_file
    void setRecordFile(const std::string &pRecordFile) noexcept;
    void setRecordFile(std::string &&pRecordFile) noexcept;
    void setRecordFileToNull() noexcept;

    /**  For column store_server  */
    ///Get the value of the column store_server, returns the default value if the column is null
    const std::string &getValueOfStoreServer() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStoreServer() const noexcept;
    ///Set the value of the column store_server
    void setStoreServer(const std::string &pStoreServer) noexcept;
    void setStoreServer(std::string &&pStoreServer) noexcept;
    void setStoreServerToNull() noexcept;

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const int32_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getUserId() const noexcept;
    ///Set the value of the column user_id
    void setUserId(const int32_t &pUserId) noexcept;

    /**  For column size  */
    ///Get the value of the column size, returns the default value if the column is null
    const int32_t &getValueOfSize() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getSize() const noexcept;
    ///Set the value of the column size
    void setSize(const int32_t &pSize) noexcept;
    void setSizeToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 10;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    void getUser(const drogon::orm::DbClientPtr &clientPtr,
                 const std::function<void(Users)> &rcb,
                 const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<Records>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Records>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<std::string> url_;
    std::shared_ptr<std::string> title_;
    std::shared_ptr<std::string> thumbnail_;
    std::shared_ptr<std::string> status_;
    std::shared_ptr<std::string> streamUrl_;
    std::shared_ptr<std::string> recordFile_;
    std::shared_ptr<std::string> storeServer_;
    std::shared_ptr<int32_t> userId_;
    std::shared_ptr<int32_t> size_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[10]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "url,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "title,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "thumbnail,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "status,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "stream_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "record_file,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "store_server,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "user_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "size,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(dirtyFlag_[1])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[9])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace main
} // namespace drogon_model
