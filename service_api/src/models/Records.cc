/**
 *
 *  Records.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Records.h"
#include "Users.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::main;

const std::string Records::Cols::_id = "id";
const std::string Records::Cols::_url = "url";
const std::string Records::Cols::_title = "title";
const std::string Records::Cols::_thumbnail = "thumbnail";
const std::string Records::Cols::_status = "status";
const std::string Records::Cols::_stream_url = "stream_url";
const std::string Records::Cols::_record_file = "record_file";
const std::string Records::Cols::_store_server = "store_server";
const std::string Records::Cols::_user_id = "user_id";
const std::string Records::Cols::_size = "size";
const std::string Records::primaryKeyName = "";
const bool Records::hasPrimaryKey = false;
const std::string Records::tableName = "records";

const std::vector<typename Records::MetaData> Records::metaData_={
{"id","int32_t","integer",4,1,0,1},
{"url","std::string","character varying",0,0,0,1},
{"title","std::string","character varying",0,0,0,0},
{"thumbnail","std::string","character varying",0,0,0,0},
{"status","std::string","character varying",0,0,0,0},
{"stream_url","std::string","character varying",0,0,0,0},
{"record_file","std::string","character varying",0,0,0,0},
{"store_server","std::string","character varying",0,0,0,0},
{"user_id","int32_t","integer",4,0,0,1},
{"size","int32_t","integer",4,0,0,0}
};
const std::string &Records::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Records::Records(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["url"].isNull())
        {
            url_=std::make_shared<std::string>(r["url"].as<std::string>());
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["thumbnail"].isNull())
        {
            thumbnail_=std::make_shared<std::string>(r["thumbnail"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if(!r["stream_url"].isNull())
        {
            streamUrl_=std::make_shared<std::string>(r["stream_url"].as<std::string>());
        }
        if(!r["record_file"].isNull())
        {
            recordFile_=std::make_shared<std::string>(r["record_file"].as<std::string>());
        }
        if(!r["store_server"].isNull())
        {
            storeServer_=std::make_shared<std::string>(r["store_server"].as<std::string>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["size"].isNull())
        {
            size_=std::make_shared<int32_t>(r["size"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 10 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            url_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            thumbnail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            streamUrl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            recordFile_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            storeServer_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            size_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Records::Records(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            thumbnail_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            streamUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            recordFile_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            storeServer_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            size_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
}

Records::Records(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("thumbnail"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["thumbnail"].isNull())
        {
            thumbnail_=std::make_shared<std::string>(pJson["thumbnail"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("stream_url"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["stream_url"].isNull())
        {
            streamUrl_=std::make_shared<std::string>(pJson["stream_url"].asString());
        }
    }
    if(pJson.isMember("record_file"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["record_file"].isNull())
        {
            recordFile_=std::make_shared<std::string>(pJson["record_file"].asString());
        }
    }
    if(pJson.isMember("store_server"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["store_server"].isNull())
        {
            storeServer_=std::make_shared<std::string>(pJson["store_server"].asString());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("size"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["size"].isNull())
        {
            size_=std::make_shared<int32_t>((int32_t)pJson["size"].asInt64());
        }
    }
}

void Records::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            url_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            thumbnail_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            streamUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            recordFile_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            storeServer_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            size_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
}

void Records::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("url"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["url"].isNull())
        {
            url_=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("thumbnail"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["thumbnail"].isNull())
        {
            thumbnail_=std::make_shared<std::string>(pJson["thumbnail"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("stream_url"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["stream_url"].isNull())
        {
            streamUrl_=std::make_shared<std::string>(pJson["stream_url"].asString());
        }
    }
    if(pJson.isMember("record_file"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["record_file"].isNull())
        {
            recordFile_=std::make_shared<std::string>(pJson["record_file"].asString());
        }
    }
    if(pJson.isMember("store_server"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["store_server"].isNull())
        {
            storeServer_=std::make_shared<std::string>(pJson["store_server"].asString());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("size"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["size"].isNull())
        {
            size_=std::make_shared<int32_t>((int32_t)pJson["size"].asInt64());
        }
    }
}

const int32_t &Records::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Records::getId() const noexcept
{
    return id_;
}
void Records::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const std::string &Records::getValueOfUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(url_)
        return *url_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Records::getUrl() const noexcept
{
    return url_;
}
void Records::setUrl(const std::string &pUrl) noexcept
{
    url_ = std::make_shared<std::string>(pUrl);
    dirtyFlag_[1] = true;
}
void Records::setUrl(std::string &&pUrl) noexcept
{
    url_ = std::make_shared<std::string>(std::move(pUrl));
    dirtyFlag_[1] = true;
}

const std::string &Records::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Records::getTitle() const noexcept
{
    return title_;
}
void Records::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[2] = true;
}
void Records::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[2] = true;
}
void Records::setTitleToNull() noexcept
{
    title_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Records::getValueOfThumbnail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(thumbnail_)
        return *thumbnail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Records::getThumbnail() const noexcept
{
    return thumbnail_;
}
void Records::setThumbnail(const std::string &pThumbnail) noexcept
{
    thumbnail_ = std::make_shared<std::string>(pThumbnail);
    dirtyFlag_[3] = true;
}
void Records::setThumbnail(std::string &&pThumbnail) noexcept
{
    thumbnail_ = std::make_shared<std::string>(std::move(pThumbnail));
    dirtyFlag_[3] = true;
}
void Records::setThumbnailToNull() noexcept
{
    thumbnail_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Records::getValueOfStatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Records::getStatus() const noexcept
{
    return status_;
}
void Records::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[4] = true;
}
void Records::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[4] = true;
}
void Records::setStatusToNull() noexcept
{
    status_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Records::getValueOfStreamUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(streamUrl_)
        return *streamUrl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Records::getStreamUrl() const noexcept
{
    return streamUrl_;
}
void Records::setStreamUrl(const std::string &pStreamUrl) noexcept
{
    streamUrl_ = std::make_shared<std::string>(pStreamUrl);
    dirtyFlag_[5] = true;
}
void Records::setStreamUrl(std::string &&pStreamUrl) noexcept
{
    streamUrl_ = std::make_shared<std::string>(std::move(pStreamUrl));
    dirtyFlag_[5] = true;
}
void Records::setStreamUrlToNull() noexcept
{
    streamUrl_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Records::getValueOfRecordFile() const noexcept
{
    const static std::string defaultValue = std::string();
    if(recordFile_)
        return *recordFile_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Records::getRecordFile() const noexcept
{
    return recordFile_;
}
void Records::setRecordFile(const std::string &pRecordFile) noexcept
{
    recordFile_ = std::make_shared<std::string>(pRecordFile);
    dirtyFlag_[6] = true;
}
void Records::setRecordFile(std::string &&pRecordFile) noexcept
{
    recordFile_ = std::make_shared<std::string>(std::move(pRecordFile));
    dirtyFlag_[6] = true;
}
void Records::setRecordFileToNull() noexcept
{
    recordFile_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Records::getValueOfStoreServer() const noexcept
{
    const static std::string defaultValue = std::string();
    if(storeServer_)
        return *storeServer_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Records::getStoreServer() const noexcept
{
    return storeServer_;
}
void Records::setStoreServer(const std::string &pStoreServer) noexcept
{
    storeServer_ = std::make_shared<std::string>(pStoreServer);
    dirtyFlag_[7] = true;
}
void Records::setStoreServer(std::string &&pStoreServer) noexcept
{
    storeServer_ = std::make_shared<std::string>(std::move(pStoreServer));
    dirtyFlag_[7] = true;
}
void Records::setStoreServerToNull() noexcept
{
    storeServer_.reset();
    dirtyFlag_[7] = true;
}

const int32_t &Records::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Records::getUserId() const noexcept
{
    return userId_;
}
void Records::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[8] = true;
}

const int32_t &Records::getValueOfSize() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(size_)
        return *size_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Records::getSize() const noexcept
{
    return size_;
}
void Records::setSize(const int32_t &pSize) noexcept
{
    size_ = std::make_shared<int32_t>(pSize);
    dirtyFlag_[9] = true;
}
void Records::setSizeToNull() noexcept
{
    size_.reset();
    dirtyFlag_[9] = true;
}

void Records::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Records::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "url",
        "title",
        "thumbnail",
        "status",
        "stream_url",
        "record_file",
        "store_server",
        "user_id",
        "size"
    };
    return inCols;
}

void Records::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getThumbnail())
        {
            binder << getValueOfThumbnail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStreamUrl())
        {
            binder << getValueOfStreamUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRecordFile())
        {
            binder << getValueOfRecordFile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getStoreServer())
        {
            binder << getValueOfStoreServer();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSize())
        {
            binder << getValueOfSize();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Records::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    return ret;
}

void Records::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getThumbnail())
        {
            binder << getValueOfThumbnail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStreamUrl())
        {
            binder << getValueOfStreamUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRecordFile())
        {
            binder << getValueOfRecordFile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getStoreServer())
        {
            binder << getValueOfStoreServer();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSize())
        {
            binder << getValueOfSize();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Records::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getThumbnail())
    {
        ret["thumbnail"]=getValueOfThumbnail();
    }
    else
    {
        ret["thumbnail"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getStreamUrl())
    {
        ret["stream_url"]=getValueOfStreamUrl();
    }
    else
    {
        ret["stream_url"]=Json::Value();
    }
    if(getRecordFile())
    {
        ret["record_file"]=getValueOfRecordFile();
    }
    else
    {
        ret["record_file"]=Json::Value();
    }
    if(getStoreServer())
    {
        ret["store_server"]=getValueOfStoreServer();
    }
    else
    {
        ret["store_server"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getSize())
    {
        ret["size"]=getValueOfSize();
    }
    else
    {
        ret["size"]=Json::Value();
    }
    return ret;
}

Json::Value Records::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 10)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUrl())
            {
                ret[pMasqueradingVector[1]]=getValueOfUrl();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[2]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getThumbnail())
            {
                ret[pMasqueradingVector[3]]=getValueOfThumbnail();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[4]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getStreamUrl())
            {
                ret[pMasqueradingVector[5]]=getValueOfStreamUrl();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getRecordFile())
            {
                ret[pMasqueradingVector[6]]=getValueOfRecordFile();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getStoreServer())
            {
                ret[pMasqueradingVector[7]]=getValueOfStoreServer();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[8]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getSize())
            {
                ret[pMasqueradingVector[9]]=getValueOfSize();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getThumbnail())
    {
        ret["thumbnail"]=getValueOfThumbnail();
    }
    else
    {
        ret["thumbnail"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getStreamUrl())
    {
        ret["stream_url"]=getValueOfStreamUrl();
    }
    else
    {
        ret["stream_url"]=Json::Value();
    }
    if(getRecordFile())
    {
        ret["record_file"]=getValueOfRecordFile();
    }
    else
    {
        ret["record_file"]=Json::Value();
    }
    if(getStoreServer())
    {
        ret["store_server"]=getValueOfStoreServer();
    }
    else
    {
        ret["store_server"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getSize())
    {
        ret["size"]=getValueOfSize();
    }
    else
    {
        ret["size"]=Json::Value();
    }
    return ret;
}

bool Records::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(1, "url", pJson["url"], err, true))
            return false;
    }
    else
    {
        err="The url column cannot be null";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(2, "title", pJson["title"], err, true))
            return false;
    }
    if(pJson.isMember("thumbnail"))
    {
        if(!validJsonOfField(3, "thumbnail", pJson["thumbnail"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(4, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("stream_url"))
    {
        if(!validJsonOfField(5, "stream_url", pJson["stream_url"], err, true))
            return false;
    }
    if(pJson.isMember("record_file"))
    {
        if(!validJsonOfField(6, "record_file", pJson["record_file"], err, true))
            return false;
    }
    if(pJson.isMember("store_server"))
    {
        if(!validJsonOfField(7, "store_server", pJson["store_server"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(8, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("size"))
    {
        if(!validJsonOfField(9, "size", pJson["size"], err, true))
            return false;
    }
    return true;
}
bool Records::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Records::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(1, "url", pJson["url"], err, false))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(2, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("thumbnail"))
    {
        if(!validJsonOfField(3, "thumbnail", pJson["thumbnail"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(4, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("stream_url"))
    {
        if(!validJsonOfField(5, "stream_url", pJson["stream_url"], err, false))
            return false;
    }
    if(pJson.isMember("record_file"))
    {
        if(!validJsonOfField(6, "record_file", pJson["record_file"], err, false))
            return false;
    }
    if(pJson.isMember("store_server"))
    {
        if(!validJsonOfField(7, "store_server", pJson["store_server"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(8, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("size"))
    {
        if(!validJsonOfField(9, "size", pJson["size"], err, false))
            return false;
    }
    return true;
}
bool Records::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Records::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            else
            {
                err="The automatic primary key cannot be update";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
void Records::getUser(const DbClientPtr &clientPtr,
                      const std::function<void(Users)> &rcb,
                      const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from users where id = $1";
    *clientPtr << sql
               << *userId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Users(r[0]));
                    }
               }
               >> ecb;
}
